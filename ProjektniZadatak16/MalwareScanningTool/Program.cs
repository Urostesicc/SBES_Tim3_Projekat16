using CertificateManager;
using Contracts;
using SecurityManager;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IdentityModel.Policy;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace MalwareScanningTool
{
    class Program
    {
        static void Main(string[] args)
        {
            //string name = "mst";
            string name = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);
            Console.WriteLine(name);

            NetTcpBinding bindingCL = new NetTcpBinding();
            string addressCL = "net.tcp://localhost:9999/Service";

            //Windows Authentification
            bindingCL.Security.Mode = SecurityMode.Transport;
            bindingCL.Security.Transport.ClientCredentialType = TcpClientCredentialType.Windows;
            bindingCL.Security.Transport.ProtectionLevel = System.Net.Security.ProtectionLevel.EncryptAndSign;

            ServiceHost hostCL = new ServiceHost(typeof(MalwareScanningTool));
            hostCL.AddServiceEndpoint(typeof(IClientCommunication), bindingCL, addressCL);

            //Defining CustomAuthorizationManager as the preffered one.
            hostCL.Authorization.ServiceAuthorizationManager = new CustomAuthorizationManager();

            //Defining our principal settings.
            hostCL.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;
            List<IAuthorizationPolicy> policies = new List<IAuthorizationPolicy>();
            policies.Add(new CustomAuthorizationPolicy());
            hostCL.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();

            ServiceSecurityAuditBehavior newAudit = new ServiceSecurityAuditBehavior();
            newAudit.AuditLogLocation = AuditLogLocation.Application;
            newAudit.ServiceAuthorizationAuditLevel = AuditLevel.SuccessOrFailure;

            hostCL.Description.Behaviors.Remove<ServiceSecurityAuditBehavior>();
            hostCL.Description.Behaviors.Add(newAudit);

            string srvCertCN = "ids";

            NetTcpBinding bindingIDS = new NetTcpBinding();
            bindingIDS.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;
            X509Certificate2 srvCert = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCN);
            EndpointAddress addressIDS = new EndpointAddress(new Uri("net.tcp://localhost:9998/IDS"),
                                      new X509CertificateEndpointIdentity(srvCert));

            hostCL.Open();

            Console.WriteLine("Service is opened. Press <enter> to finish...");
        }
    }
}
